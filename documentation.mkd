name: inverse
layout: true
class: center, middle, inverse

---

# Modern code documentation

## Radovan Bast

Licensed under [CC BY 4.0](https://creativecommons.org/licenses/by/4.0/).
Code examples: [OSI](http://opensource.org)-approved [MIT license](http://opensource.org/licenses/mit-license.html).

---

layout: false

## When you look at a code project for the first time, what are the things you look for?

---

## When you look at a code project for the first time, what are the things you look for?

- Website is the first thing I see
- Documentation often the second
- If both are repelling, I am repelled
- Sometimes both are nonexistent
- If I see that the documentation has not been updated since 2001, then I will probably walk away

---

## Motivation

- Documentation is important
- Project website is important
- Companies without a website cannot exist
- Soon scientific projects without website will not be able to exist (or in other words get grants)
- Writing and reading documentation can be fun
- Documentation does not have to be outdated/incomplete
- If the documentation is notoriously outdated/incomplete, it can mean
  that your documentation framework/workflow is not ideal
- It is not always the lazy programmer, sometimes it is the framework

---

## Start-ups vs. scientific projects

- Start-ups have beautiful websites
- Scientific projects often have "terrible" websites
- Why?

---

## Start-ups vs. scientific projects

- Start-ups have beautiful websites
- Scientific projects often have terrible websites
- Lance Armstrong: "It's not the bike it's the rider."
- Concerning documentation, sometimes it is not the rider, it is the bike
- Some projects simply use better tools

---

## Problems with many code projects (1/2)

- Parts of the documentation are outdated/incomplete
- Barrier to write documentation is relatively high (LaTeX)
- Documentation workflows undocumented
- We typically program first and document later (or never)
- PDF format is not ideal for copy-paste ability of examples
- PDF manual is not ideal on small screens (phone)
- No manual for developers (first steps, call tree, where to start, what to do and what not to do)
- One documentation for different versions (either just confusing or documentation for
  older versions is just dropped)
- This is why wikis are IMO not ideal for documentation

---

## Problems with many code projects (2/2)

- Many websites look like websites created by scientists in the 90s
- Websites is not suitable for phones
- Documentation is good for people who know what the program can do and who know how to run the code
- Have to read a lot of text in different places just to get started
- Keyword-driven (what is possible) instead of tutorial-driven (what is recommended)
- With some projects it is impossible to get a result after 5 minutes of reading
- Some scientific projects take pride in being inaccessible, hard to understand, undocumented, opaque

---

## Specs of a good documentation

* Close to the code (minimize barrier)
* Versions: If the project has versions, the documentation should too
* Lightweight markup (LaTeX is not lightweight enough)
* Readable on any device
* Division into tutorials and keyword reference
* Tutorials contain good defaults
* Ready examples that one can copy-paste to get quickly started
* Prose
* Written by humans

---

## Technology: use good open source software

- Project documentation
    - reStructuredText (RST)
    - Sphinx http://sphinx-doc.org
    - Markdown and MkDocs http://www.mkdocs.org
    - Pandoc http://johnmacfarlane.net/pandoc/
    - Dokuwiki https://www.dokuwiki.org (difficult to have versions, though)

- Project website
    - Bootstrap http://getbootstrap.com
    - Flask http://flask.pocoo.org
    - Jekyll http://jekyllrb.com
    - Hyde http://hyde.github.io

---

## Technology: use the cloud

- Save electricity and trouble with security, backup, and downtime
- GitHub pages https://pages.github.com for project websites
- Read the Docs https://readthedocs.org for project documentation
- Projects using Sphinx
    - Everything Python related
    - CMake http://www.cmake.org/cmake/help/v3.0/release/3.0.0.html
    - PhpMyAdmin http://docs.phpmyadmin.net
    - Flask http://flask.pocoo.org
    - PSI4 http://sirius.chem.vt.edu/psi4manual/latest/index.html
    - DIRAC http://www.diracprogram.org/doc/release-13/
    - Many more
- Projects using Sphinx and ReadTheDocs
    - Django http://django.readthedocs.org
    - This course http://toolbox.readthedocs.org
    - Many more

---

## Typical workflow for many projects

- Project website and documentation website sources are public
- Both documentation and project websites refresh automatically upon `post-receive` hook
- Project website uses Bootstrap (any device)
- Documentation deployed to https://readthedocs.org (any device)
- PDF can be generated on the fly
- Equations and images no problem
- Layout can be changed
- Free hosting
- It is no problem to serve from GitHub pages or Read the Docs using your own URL
- Many projects use https://readthedocs.org as their main site

---

## Typical ReadTheDocs workflow

- Host source code with documentation sources on GitHub
- `post-receive` sends POST request to ReadTheDocs to rebuild the documentation

```shell
$ curl -X POST http://readthedocs.org/build/myproject
```

- ReadTheDocs then fetches changes (typically from GitHub but can be somewhere else provided the repo is public)
  and rebuilds html and pdf
- No problem to build several branches (versions) of your documentation

---

## RST and Markdown

- Both very lightweight
- Looks good in the browser
- Looks good in the terminal

---

## Doxygen

- Typically used to autogenerate API documentation
- Documented directly in the source code
- Popular in the C++ community (Doxygen is to C++ what Sphinx is to Python)
- Has support for Fortran and Python
- Many keywords are understood by Doxygen: http://www.stack.nl/~dimitri/doxygen/manual/commands.html
- Can be used to also generate higher-level ("human") documentation
- Nice example: http://pcmsolver.github.io/pcmsolver-doc/

---

## Typical GitHub pages workflow

- Create `gh-pages` branch for your project which holds website sources
- Every push automatically rebuilds http://myorg.github.io/myproject/ [site does not exist]
- It is good practice to use Bootstrap for CSS
- GitHub provides an automatic page generator: you can create a shiny project website in 5 minutes
- See also https://pages.github.com for step-by-step guides

---

## Good practices (1/2)

- Whatever solution you choose, make it automatically rebuild pages upon `git push`
- If you need to ask somebody to run some scripts on the server after you have modified sources,
  that will not work in practice (does not scale)
- Answer questions with an URL to (updated) documentation
    - Email answers get lost/forgotten
    - Answer and improve doc at the same time
    - Long-term lazy
    - Chance is that next time the user/colleague
      will find the answer by him/herself
    - Trains people to read the doc

---

## Good practices (2/2)

- Write documentation that you would like to read
- Different people need different documentation
- When using code review make sure that new functionality always comes with documentation
- Some people who install and test the software know nothing about the theory behind the code
    - Busy user support at computing centers
    - Vendors who run benchmarks
- Market success stories (pictures, scaling, molecules, be proud)
